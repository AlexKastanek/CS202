This program’s purpose is to provide a menu with multiple options for the user. Depending on what option the user picks, the program will function accordingly. There are five options in total as well as a prompt before the menu pops up that asks for the user to identify a file he or she wants to have scanned into the program. The program will call the get_input function, which will scan that file and store it into an array of size 10 of structs called rentalCar. Stored in this struct, is the make of a car, the model of that car, the year that car was made, the price of that car, and a boolean that distinguishes whether that car is available or not. If the user chooses option 1 after being prompted for the file name, the print_data function will be called. This function will print all of the data I previously mentioned (model, make, year, price, and availability for 10 cars). If the user chooses option 2, the estimate_cost function will be called, which passes two variables by reference, dayNum and carNum. The user will then be prompted for numberOfDays and carNumber, which are simply the addresses of dayNum and carNum, so when the user enters this information, the values of dayNum and carNum will be changed globally and according to their addresses. This function will go on to calculate the price of a user-specified car (carNum) over a user-specified amount of days (dayNum). If the user chooses option 3, the most_expensive function will be called. This function will loop through the information of each car and determine which one is the most expensive and print that out to screen. If the user chooses option 4, the print_available function will be called. This function will test which cars are available based on their boolean 1 or 0 representations of “true” or “false.” If availability is true, it will print that car to screen, and if it is false, it will not print that car to screen. If the user chooses option 5, the loop will be exited and the program will end. If the user enters any other character, the loop will continue until the user has entered a valid character. I had a very small amount of issues with this program. I was able to do everything fairly easily and efficiently. The biggest problem I had was passing something by reference. The only reason for this problem was I over-complicated it for myself. I tried to pass my ifstream variable “fin” by reference to my get_input function, but that caused all sorts of problems and compile errors. My solution was simply to change what I was passing by reference. Two integer values worked out a lot more smoothly then an ifstream variable. If I were given more time, I would try to make my program even more efficient and fast by eliminating some redundant lines of code. I would also try to make the menu and the displayed information a bit more pretty. I incorporated some designs already, but I feel like it could still use an improvement.

