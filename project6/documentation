The purpose of the Agency class, Car class and the test driver for the class is to be able to read in from a file information about a car agency and store that information into the private members of each class. There are several public function that also serve different purposes as well. The Car class consists of several data types as private members. These members are year (int), make (char*), model (char*), price (float), and available (bool). There are a few public functions as well. These function include constructors ranging from default to parameterized, and a copy constructor. There is also a destructor. There are multiple get/set functions (one for each private member), a copy function, and a print function. In the Agency class, there are 3 private members consisting of name (char*), zipcode (int*), and inventory (Car*). There are only 2 constructors for this class, a default constructor and copy constructor as well as a destructor. It includes a readInData function which reads in all of the data from the user-specified file and stores it in memory. The print function prints out all of the data in the object. The printAvailableCars prints only the cars that have available variables that equal one. The findMostExpensive function searches for the Car object with the highest price member and prints that object to screen. The estimateCost function, which takes in the day number and car number as arguments, determines what the cost of a particular car is over a certain amount of days. The sortByMake function sorts every Car object in the array of Cars in an Agency object in alphabetical order by the name of the make of the particular car. The sortByPrice function sorts every Car object numerically from greatest to least by price. The searchByMake function searches for a specified make name and prints every match found. If there are no matches, it prints that there are none. I didnâ€™t have many problems at all with either part of this project. I had a couple bugs here and there, and then at one point I had a segmentation fault while trying to make sorting work. It was caused by the pointers incrementing beyond the length of one of the words, which caused all sorts of issues. It was an easy fix in which I just needed to get the length of each word and have it only increment to the smaller word.

