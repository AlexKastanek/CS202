Observations:
1. My first observation was the order of inheritance. Whenever a rectangular prism or cylinder are constructed, the classes they are inherited from are also constructed, but rectangular prism and cylinder are derived from those constructions.
2. My second observation was how when I create a shape, and use a shape pointer, it affects the derived class objects like rectangle and circle. This is because the classes are derived from shape and therefore share some data.
3. My third observation was that a list of shapes could actually be a list of a mix of rectangles, circles, rectangular prisms, and cylinders because they are all derived from each other.
4. My fourth observation is how you cannot allocate memory for a type of shape without first allocating memory for a shape class object. This is because the specific kind of shape is derived from the shape class, so if an object of the shape class does not exist, the specific type of shape cannot exist either.

Documentation:
	This project was a nice way to end the semester. I did not have much trouble at all. The functions in each class were fairly straightforward. The only part that confused me was attempting to understand how inheritance worked, but once I was able to wrap my brain around it, I was totally fine. The goal of this project was to make a shape class that inherited rectangle and circle classes and then those classes inherited rectangular prism and cylinder classes respectively. The functions within the classes were as follows: if the shape is 3D, then there are functions that will calculate the surface area and the volumne, and if the shape is 2D, then there are functions that will calculate the perimeter and area. We also had to document different tests to see just exactly how the inheritance worked. If I had more time, I would definitely spend more time testing my program to really figure out exactly how inheritance works.
