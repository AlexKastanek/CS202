The purpose of this program is to decipher a code in a given file. In the example that was provided, the code when deciphered will read “I do not fear computers, I fear the lack of them.” The process I took to completing this was by first prompting the user for the filename. The program then calls the get_bounds function. This function opens the file and stores the first two integers in the file. These integers represent the number of words and the number of keys in the code. The function stops, but the values are kept because they were passed by reference. Using these values, the program allocates two arrays, one for the struct Pieces and one for the keys. The program then calls the get_input to simply get the rest of the data in the file. Using this data, the program can then decipher the code. To do this, it calls the decipher_code function. This function contains a for loop that runs for the amount of keys. In the loop it increments the pointer to the array of Pieces by the value the current key contains. It then loops while that pointer does not contain a zero in the jump value. So long as there is not a zero in the jump value, it increments the pointer by that jump value. If the pointer reaches the end of the cipher, it will loop back around to the beginning. If jump is not zero, then it prints out the word the pointer contains. It should call the concatenate function to concatenate it to the decoded array which would have been the final array. Sadly, I could not get this working. Concatenate was supposed to take decode as well as the word the pointer is on, and add that word to decode. It would have done this by incrementing a pointer that points to the first value in decode up to where the next word would need to be placed. This worked, but when I tried to actually give the values to decode in another loop, it would not register. I suspect this was happening because the information was being lost during the pass to the function. All in all, however, the program works and is able to decipher the code. I had other problems with the program that I was able to fix. One problem dealt with the allocation of my arrays inside the get_input function. Information was being lost and I was getting a lot of segfaults. I simply moved these allocations outside of the function and got the sizes for them in a separate get_bounds function. I was also having trouble with decrypting the code because whenever I incremented a pointer, information held by that would be lost. I fixed this by assigning a separate variable that value. If I had more time, I would have definitely tried to fix the str_concat function and most likely would have found a way to write it in main. 

