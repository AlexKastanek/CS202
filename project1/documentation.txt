Project1 Documentation
The overall purpose of this program is to take input from a user provided file of a list of names and sort those names alphabetically. Once the list of names is sorted, it prints the original list to the screen as well as the sorted list. It also writes the list to a separate file which is named through another prompt for user input. This information is also provided in the commented header in the source code file. My process of programming this could have been a lot better, and I have many things to improve on. I tend to jump directly into coding without planning far too often, and I made the mistake again with this project. I forget what I’m doing a lot of times, and there really isn’t any plan that I’m trying to follow. I just sort of try to get it to work. Eventually, in this project, I realized that wasn’t going to get anywhere if I didn’t provide myself with a plan. I looked up different sorting methods, and I found which one worked best for me. The bubble sort is what my code tries to follow, but it differs in some areas in which it just wasn’t working for me. Basically, my code has two functions, main and sort_names. In main, the program gets input from the user and the data from the user-identified file. Main also handles the writing and output operations after sort_names is called. Sort_names is what actually sorts the names alphabetically using my own variation of a bubble sort. It takes in an array of names as an argument and will sort them so long as precisely ten names are entered. If there is not exactly 10 names all separated by spaces, the function returns garbage. This is one improvement I would make if I had more time. I would make the function check to see if not only the names were entered correctly, but the file was as well. I would also make it check to see if the file even exists. I have only five variables, not including incrementing variables,  in my main function, and I have one more in sort_names. There are two variables that have data types handled by the fstream library in which I store the variable name of the file, and there are two variables that are char arrays that hold the names of the input and output files that the user is prompted for. There is a multidimensional char array that stores every name from the user-identified input file. The one variable that is added in sort_names is an integer called temp that allows the swapping of names during sorting to occur within the same array. I commented out the main problem I was originally having and that I fixed by simply rewriting in a more efficient way. This block of code was my original attempt at sorting the list of names. By looking at the block of code, it’s fairly obvious that not much strategy or pre-planning went into it at all. I kept it there for reference and decided to leave it in as a comment to show my process of work. I also left a debugging lines of code as comments as well. The only other problems I had were fairly simple ones that were easy to solve. One that was giving me trouble for a while was my block of code that was writing the sorted list to a separate file. It was outputting some random hexadecimal number instead of the sorted list. I tried outputting my original list of names, and not even that worked. I took a break from trying to figure this out, and the next day I came back to it and realized that I was outputting names and should have just outputted names[i]. Some more improvements I would make if I were given more time are the general efficiency of sort_names. I made it a lot better since I had first written it, but it still has a few bugs that need to be kinked out. For example, let’s say two of the names are jarett and jared in that order. The function does not recognize a character difference after the second place in the char array. It will sort bob and joe correctly. It will even sort bob and barry correctly. Anything past that second place, however, it does not see even though it should. Another thing I would fix but I can’t really do anything about now is my script file. I had been using the script command since starting my project, but I did not realize that I had to include “-a” to append to the file. So I have been overwriting my file this entire time. Even at the end, when I knew about “-a”, I still made the mistake of not typing by accident, so this is why there is almost know commands or data on the typescript file, and I apologize for that. To solve this issue, every time I exit my scripting process I am going to backup the data to a second storage, so if I overwrite it again, it will be saved somewhere else as well. 

