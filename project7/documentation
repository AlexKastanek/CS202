	The purpose of this program is to take in any amount of polynomials as input and do different functions with those polynomials. The public functions in the Polynomial class can add any two polynomials, subtract them, multiply them, multiply them by a constant, solve them for a constant, and print any one of them to screen. The functions use operator overload to make the process of doing these different functions easier on the writer and much more conventional. The only problem I had with this project was trying to wrap my brain around making some of these functions. The getinput, or extraction operator, function was particularly intimidating because we had to pass the location of the istream (where the function was reading from) and return it after the function was done taking the input it needed. Once I did some research, however, I was able to easily understand why we needed to do that, and didn’t have any problems with doing it. The other function that was difficult for me was the the function in which we needed to multiply two polynomials. Multiplying the two polynomials wasn’t the hard part. The hard part was adding the like terms to simplify the final expression. I ended up using a pretty complicated method that is similar to the way Pascal’s triangle works. If you take any two polynomials and multiply their max degrees together, you get the amount of terms in the unsimplified expression. If you add the max degrees, you get the max degree of the final expression. This was very useful in my method, and soon realized that the amount of like terms increments by one each time you add one to its degree all the way up until you reached half of the max degree. Once you reach half, you start going back down until you’ve reached 0 again. This is what I ended up implementing, and it works perfectly. It took me a while to figure out, but it definitely works.

